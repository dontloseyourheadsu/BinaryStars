@page "/downloads"
@using Microsoft.Maui.ApplicationModel
@using Microsoft.Maui.ApplicationModel.DataTransfer
@using Microsoft.Maui.Storage
@inject IJSRuntime JS

<article>
    <h1 class="page-title mb-4">Downloads</h1>

    @if (!Files.Any())
    {
        <p>No files have been received yet.</p>
    }
    else
    {
        <div class="card-surface p-0">
            <table class="table table-striped mb-0 text-white">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th class="text-end pe-3">Size (KB)</th>
                        <th class="text-end pe-3">Modified</th>
                        <th class="text-end pe-3">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var f in Files)
                    {
                        <tr>
                            <td class="text-white">@f.Name</td>
                            <td class="text-end pe-3 text-white">@Math.Round(f.Length / 1024.0, 1)</td>
                            <td class="text-end pe-3 text-white">@f.LastWriteTime.ToLocalTime()</td>
                            <td class="text-end pe-3">
                                <div class="d-flex flex-column gap-1 align-items-end">
                                    <button class="btn btn-sm btn-outline-primary w-100" @onclick="() => OpenAsync(f)">Open</button>
                                    <button class="btn btn-sm btn-outline-primary w-100" @onclick="() => ShareAsync(f)">Share</button>
                                    <button class="btn btn-sm btn-outline-danger w-100" @onclick="() => Delete(f)">Delete</button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</article>

@code {
    private List<FileInfo> Files = new();

    protected override void OnInitialized() => Refresh();

    private void Refresh()
    {
        var dir = FileSystem.AppDataDirectory;
        Files = Directory.GetFiles(dir)
                         .Select(f => new FileInfo(f))
                         .Where(f => f.Extension != ".db3")
                         .OrderByDescending(f => f.LastWriteTimeUtc)
                         .ToList();
    }

    private async Task OpenAsync(FileInfo f)
    {
        await Launcher.OpenAsync(new OpenFileRequest
            {
                File = new ReadOnlyFile(f.FullName),
                Title = f.Name
            });
    }

    private async Task ShareAsync(FileInfo f)
    {
        await Share.RequestAsync(new ShareFileRequest
            {
                Title = $"Share {f.Name}",
                File = new ShareFile(f.FullName)
            });
    }

    private void Delete(FileInfo f)
    {
        File.Delete(f.FullName);
        Refresh();
    }
}