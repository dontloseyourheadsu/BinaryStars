@page "/file-transfer"
@using Microsoft.AspNetCore.Components.Forms
@using SysColab.Components.Shared
@using SysColab.Models
@using SysColab.Services
@inherits SharedComponent

<article>
    <h1 class="page-title">File Transfer</h1>

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
            <div class="alert @(IsError ? "alert-danger" : "alert-info") mb-3">
            @StatusMessage
            </div>
    }

    <!-- Device Selector (online & paired only) -->
    <div class="mb-3">
        <label for="deviceSelect" class="form-label">Choose Device</label>
        <select id="deviceSelect" class="form-control" @bind="SelectedDeviceId">
            <option value="">-- Select a Device --</option>
            @foreach (var device in OnlinePairedDevices)
            {
                    <option value="@device.Id">@device.Name (@device.Address)</option>
            }
        </select>
    </div>

    <!-- File Picker -->
    <div class="mb-3">
        <label for="fileInput" class="form-label">Select File (≤ 5 MB)</label>
        <InputFile id="fileInput" OnChange="OnInputFileChanged" class="form-control" />
    </div>

    <!-- Selected File Details -->
    <div class="mb-4">
        <h2 class="section-title">Selected File</h2>
        @if (SelectedFile != null)
        {
                <div class="simple-list-item d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-center">
                    <div>
                        <strong>@SelectedFile.Name</strong><br />
                        <small>@string.Format("{0:N0} KB", SelectedFile.Size / 1024)</small>
                    </div>
                </div>
        }
        else
        {
                <p class="mb-0">No file selected.</p>
        }
    </div>

    <!-- Send Button -->
    <button class="btn btn-primary"
            @onclick="SendFile"
            disabled="@(SelectedFile == null || string.IsNullOrEmpty(SelectedDeviceId))">
        Send File
    </button>
</article>

@code {
    private IBrowserFile? SelectedFile;
    private string? SelectedDeviceId;

    // --------------------------------------------------------------------
    // File picker handler ‑‑ enforce 5 MB client‑side to avoid waste.
    // --------------------------------------------------------------------
    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file.Size > 5 * 1024 * 1024)
        {
            ShowError("File exceeds 5 MB limit");
            return;
        }

        SelectedFile = file;
    }

    // --------------------------------------------------------------------
    // Send file to target device via FileService (HTTP + WS notify).
    // --------------------------------------------------------------------
    private async Task SendFile()
    {
        if (SelectedFile is null)
        {
            ShowError("Select a file first");
            return;
        }

        if (string.IsNullOrEmpty(SelectedDeviceId) || !Guid.TryParse(SelectedDeviceId, out var targetId))
        {
            ShowError("Choose a device first");
            return;
        }

        var fileId = await FileService.UploadAsync(SelectedFile, CurrentDeviceId, targetId);

        if (fileId is null)
        {
            ShowError("Upload failed");
            return;
        }

        ShowStatus($"Sent {SelectedFile.Name} to {targetId}");
        SelectedFile = null; // clear UI
    }
}
