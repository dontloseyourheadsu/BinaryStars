@page "/remote-control"
@using SysColab.Components.Shared
@using SysColab.Services
@inherits SharedComponent

<article>
    <h1 class="page-title">Remote Control</h1>

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="alert @(IsError ? "alert-danger" : "alert-info") mb-3">
            @StatusMessage
        </div>
    }

    <!-- Device selector -->
    <div class="mb-3">
        <label for="deviceSelect" class="form-label">Select Device</label>
        <select id="deviceSelect"
                class="form-control"
                @bind="SelectedDeviceId"
                @bind:event="onchange">
            <option value="">-- Select a Device --</option>
            @foreach (var d in OnlinePairedDevices)
            {
                <option value="@d.Id">@d.Name (@d.Address)</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label class="form-label">Input Type</label>
        <div class="form-check">
            <input class="form-check-input"
                   type="radio"
                   id="keyboardOption"
                   name="inputType"
                   value="Keyboard"
                   checked="@(SelectedInputType == "Keyboard")"
                   @onchange="@(() => SelectedInputType = "Keyboard")" />
            <label class="form-check-label" for="keyboardOption">
                Keyboard Input
            </label>
        </div>
    </div>

    @* Keyboard UI appears only when a device is chosen *@
    @if (!string.IsNullOrWhiteSpace(SelectedDeviceId) && SelectedInputType == "Keyboard")
    {
        <div class="mb-3">
            <label for="inputText" class="form-label">Enter Keyboard Input</label>

            <!-- main text box -->
            <input id="inputText"
                   type="text"
                   class="form-control"
                   @bind="CurrentInput"
                   @oninput="HandleInput"
                   @onkeydown="HandleKeyDown"
                   autocomplete="off" />

            <!-- mini toolbar -->
            <div class="btn-group mt-2" role="group" aria-label="Special keys">
                <button type="button" class="btn btn-secondary btn-sm" @onclick="SendBackspace">⌫</button>
                <button type="button" class="btn btn-secondary btn-sm" @onclick="SendDelete">Supr</button>
                <button type="button" class="btn btn-secondary btn-sm" @onclick="SendEnter">↵</button>
            </div>
        </div>
    }
    else
    {
        <p class="text-body">
            Please select a device and “Keyboard” input to begin.
        </p>
    }
</article>

@code {
    /* ------------ state ------------ */
    private string SelectedDeviceId  { get; set; } = string.Empty;
    private string SelectedInputType { get; set; } = "Keyboard";
    private string CurrentInput      { get; set; } = string.Empty;
    private string _previousInput    = string.Empty;

    /* ------------ helpers ------------ */
    private Task SendSpecialKey(string payload) =>
        ConnectivityService.SendMessageAsync(SelectedDeviceId, "remote_input", payload);

    private Task SendBackspace() => SendSpecialKey("{BACKSPACE}");
    private Task SendDelete()    => SendSpecialKey("{DELETE}");
    private Task SendEnter()     => SendSpecialKey("\n");

    /* ------------ input handlers ------------ */
    // Fires on every value change – covers Android, iOS, desktop
    private async Task HandleInput(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? string.Empty;

        // chars added -------------------------------------------------------
        if (newValue.Length > _previousInput.Length)
        {
            var added = newValue.Substring(_previousInput.Length);
            foreach (var c in added)
            {
                await ConnectivityService.SendMessageAsync(
                    SelectedDeviceId, "remote_input",
                    c == '\n' ? "\n" : c.ToString());
            }
        }
        // backspaces --------------------------------------------------------
        else if (newValue.Length < _previousInput.Length)
        {
            var removed = _previousInput.Length - newValue.Length;
            for (var i = 0; i < removed; i++)
                await SendBackspace();
        }

        _previousInput = newValue;
    }

    // Still useful for Enter from a physical keyboard (Android sends it too)
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await SendEnter();
    }
}
