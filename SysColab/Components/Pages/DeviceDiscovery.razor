@page "/device-discovery"
@using System.Net.NetworkInformation
@using System.Text.Json
@using SysColab.Constants
@using SysColab.Helpers
@using SysColab.Models
@using SysColab.Services
@using SysColab.Shared
@inject NavigationManager Navigation
@inject ConnectivityService ConnectivityService
@inject PairedDevicesService PairedDevicesService
@inject DeviceMappingService DeviceMappingService

<article>
    <h1 class="page-title">Device Discovery</h1>
    <div class="my-4">
        <button class="btn btn-primary" @onclick="ScanDevices">
            <span>Scan for Devices</span>
        </button>
    </div>
    <div>
        @if (Devices.Any())
        {
            <ul class="simple-list mb-0">
                @foreach (var device in Devices)
                {
                    <li class="simple-list-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@device.Name</strong><br />
                            <small>@device.Address</small>
                        </div>
                        <button class="btn btn-outline-primary btn-sm" @onclick="() => Connect(device)">
                            @(device.IsPaired ? "Reconnect" : "Pair")
                        </button>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No devices scanned.</p>
        }
    </div>
</article>

@code {
    private List<DeviceInfo> Devices = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {        
            // Initialize the device info
            var deviceMacAddress = DeviceHelpers.GetMacAddress();
            var deviceId = await DeviceMappingService.GetIdByMacAsync(deviceMacAddress);
            var deviceName = DeviceHelpers.GetDeviceName();
            var deviceInfo = new DeviceInfo
            {
                Id = deviceId,
                Name = deviceName,
                Address = deviceMacAddress,
            };

            // Register the device with the server
            var httpClient = new HttpClient();
            var response = await httpClient.PostAsJsonAsync($"{ServerConstants.ServerBaseUrl}/api/register", deviceInfo);

            // Check if the response is successful
            var serverUri = $"ws://{ServerConstants.ServerDomain}/ws?uuid={deviceId}";
            await ConnectivityService.ConnectAsync(serverUri);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing device: {ex.Message}");
        }
    }

    private async Task ScanDevices()
    {
        // Clear previous devices
        Devices.Clear();
        StateHasChanged();

        try
        {        
            // Scan for devices on the network
            var httpClient = new HttpClient();
            var response = await httpClient.GetAsync($"{ServerConstants.ServerBaseUrl}/api/connected-devices");

            // Check if the response is successful
            if (response.IsSuccessStatusCode)
            {
                // Read the response content as a stream
                var stringContent = await response.Content.ReadAsStringAsync();
                var devices = JsonSerializer.Deserialize<List<DeviceInfo>>(stringContent);
                
                // Get the current device's MAC address and ID
                var currentDeviceMacAddress = DeviceHelpers.GetMacAddress();
                var currentDeviceId = await DeviceMappingService.GetIdByMacAsync(currentDeviceMacAddress);

                // Get paired devices for the current device
                var pairedDevices = await PairedDevicesService.GetPairedDevicesForId(currentDeviceId.ToString());

                // Check if the devices are paired
                if (devices != null)
                {
                    // Iterate through the devices and check if they are paired
                    foreach (var device in devices)
                    {
                        // Skip if the device is the current device
                        if (device.Address == currentDeviceMacAddress)
                        {
                            continue;
                        }

                        // Check if the device is the current device and set paired status
                        var deviceId = device.Id.ToString();
                        var isPaired = pairedDevices.Any(pd => pd.IdA == deviceId || pd.IdB == deviceId);
                        device.IsPaired = isPaired;

                        // Add the device to the list
                        Devices.Add(device);
                    }
                }
            }
            else
            {
                // Handle error
                Console.WriteLine("Error scanning devices.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scanning devices: {ex.Message}");
        }

        StateHasChanged();
    }

    private void Connect(DeviceInfo device)
    {
        // Mock connect/pair logic
        device.IsPaired = true;
    }
}
