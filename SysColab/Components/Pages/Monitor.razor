@page "/monitor"
@using SysColab.Components.Shared
@using SysColab.Models
@using SysColab.Services
@inherits SharedComponent

<article>
    <h1 class="page-title">Device Monitor</h1>

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="alert @(IsError ? "alert-danger" : "alert-info") mb-3">
            @StatusMessage
        </div>
    }

    <!-- Device Selector -->
    <div class="mb-3">
        <label for="deviceSelect" class="form-label">Select Device</label>
        <select id="deviceSelect"
        class="form-control"
        @bind="SelectedDeviceId"
        @bind:event="onchange">
            <option value="">-- Select a Device --</option>
            @foreach (var d in OnlinePairedDevices)
            {
                <option value="@d.Id">
                    @d.Name (@d.Address)
                </option>
            }
        </select>
    </div>

    @if (SelectedDeviceId != Guid.Empty)
    {
        <div class="row g-4 mt-4 align-items-stretch">
            <!-- CPU Usage -->
            <div class="col-md-6 d-flex">
                <div class="card-surface h-100 flex-fill d-flex flex-column">
                    <h2 class="section-title">CPU Usage</h2>
                    <div class="flex-fill d-flex align-items-center">
                        <div class="progress w-100">
                            <div class="progress-bar"
                            role="progressbar"
                            style="width:@DeviceMetris.CpuUsage%"
                                aria-valuenow="@DeviceMetris.CpuUsage"
                            aria-valuemin="0"
                            aria-valuemax="100">
                                @DeviceMetris.CpuUsage%
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- RAM Usage -->
            <div class="col-md-6 d-flex">
                <div class="card-surface h-100 flex-fill d-flex flex-column">
                    <h2 class="section-title">RAM Usage</h2>
                    <div class="flex-fill d-flex align-items-center">
                        <div class="progress w-100">
                            <div class="progress-bar"
                            role="progressbar"
                                style="width:@DeviceMetris.RamUsage%"
                                aria-valuenow="@DeviceMetris.RamUsage"
                            aria-valuemin="0"
                            aria-valuemax="100">
                                @DeviceMetris.RamUsage%
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Storage Usage -->
            <div class="col-md-6 d-flex">
                <div class="card-surface h-100 flex-fill d-flex flex-column">
                    <h2 class="section-title">Storage Usage</h2>
                    <div class="flex-fill d-flex align-items-center">
                        <div class="progress w-100">
                            <div class="progress-bar"
                            role="progressbar"
                                style="width:@DeviceMetris.StorageUsage%"
                                aria-valuenow="@DeviceMetris.StorageUsage"
                            aria-valuemin="0"
                            aria-valuemax="100">
                                @DeviceMetris.StorageUsage%
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Network Throughput -->
            <div class="col-md-6 d-flex">
                <div class="card-surface h-100 flex-fill d-flex flex-column">
                    <h2 class="section-title">Network Throughput</h2>
                    <div class="flex-fill">
                            <p class="mb-2">Up: @DeviceMetris.NetworkUp KB/s</p>
                            <p class="mb-0">Down: @DeviceMetris.NetworkDown KB/s</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Please select a device to monitor.</p>
    }
</article>


@code {
    private Task? _metricsTask;
    private Guid? selectedDeviceId;
    private DeviceMetrics DeviceMetris
    {
        get => Metrics;
    }

    public Guid SelectedDeviceId
    {
        get => selectedDeviceId ?? Guid.Empty;
        set
        {
            if (selectedDeviceId != value)
            {
                selectedDeviceId = value;
                StartMetricsLoop(value);
            }
        }
    }

    private void StartMetricsLoop(Guid deviceId)
    {
        // Cancel the previous task if it exists
        _cts?.Cancel();
        _cts?.Dispose();

        if (deviceId == Guid.Empty)
        {
            Metrics = new DeviceMetrics(); // Reset metrics
            return;
        }

        _cts = new CancellationTokenSource();
        _metricsTask = LoadMetricsPeriodically(deviceId, _cts.Token);
    }

    private async Task LoadMetricsPeriodically(Guid deviceId, CancellationToken token)
    {
        try
        {
            var device = OnlinePairedDevices.FirstOrDefault(d => d.Id == deviceId);
            while (!token.IsCancellationRequested)
            {
                await InvokeAsync(async () =>
                {
                    await RequestMetricsAsync(device);
                    StateHasChanged();
                });

                await Task.Delay(3000, token);
            }
        }
        catch (TaskCanceledException)
        {
            // Task was canceled, no action needed
        }
    }
}
